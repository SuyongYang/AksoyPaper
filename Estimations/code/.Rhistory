breaks = log_breaks(base = 20)
)
log20_trans
ggplot(Pat_panel, aes(x = Year, y = PATAPPRESID, color = Country, group = Country)) +
geom_line() +
geom_point() +
geom_text(data = last_obs, aes(label = Country),
hjust = -0.1,
vjust = -0.5,
nudge_x = .2,
nudge_y = .1,
check_overlap = T,
size = 2,
show.legend = FALSE) +
scale_y_continuous(trans = log20_trans()) +
#scale_y_log10() +  # Apply logarithmic scale to y-axis
labs(title = "Patents series by Country",
x = "Year",
y = "Patents") +
theme_minimal()
log20_trans <- function() {
trans_new("log20",
transform = function(x) log(x, base = 20),
inverse = function(x) 20^x,
breaks = log_breaks(base = 20)
)
}
log20_trans <- function() {
trans_new("log20",
transform = function(x) log(x, base = 20),
inverse = function(x) 20^x,
breaks = log_breaks(base = 20)
)
}
log20_trans
ggplot(Pat_panel, aes(x = Year, y = PATAPPRESID, color = Country, group = Country)) +
geom_line() +
geom_point() +
geom_text(data = last_obs, aes(label = Country),
hjust = -0.1,
vjust = -0.5,
nudge_x = .2,
nudge_y = .1,
check_overlap = T,
size = 2,
show.legend = FALSE) +
scale_y_continuous(trans = log20_trans()) +
#scale_y_log10() +  # Apply logarithmic scale to y-axis
labs(title = "Patents series by Country",
x = "Year",
y = "Patents") +
theme_minimal()
ggplot(Pat_panel, aes(x = Year, y = PATAPPRESID, color = Country, group = Country)) +
geom_line() +
geom_point() +
geom_text(data = last_obs, aes(label = Country),
hjust = -0.1,
vjust = -0.5,
nudge_x = .2,
nudge_y = .1,
check_overlap = T,
size = 2,
show.legend = FALSE) +
#scale_y_continuous(trans = log20_trans()) +
scale_y_log10() +  # Apply logarithmic scale to y-axis
labs(title = "Patents series by Country",
x = "Year",
y = "Patents") +
theme_minimal()
View(CB.Rate)
View(LR.Rate)
# Install the sympy package if you haven't already
install.packages("sympy")
install.packages("caracas")
# Install the sympy package if you haven't already
library(caracas)
install_sympy(method = "auto")
install.packages("reticulate")
install_sympy(method = "auto")
# Install the sympy package if you haven't already
library(caracas)
install_sympy(method = "auto")
library(reticulate)
install_sympy(method = "auto")
use_python("C:\Users\USER\AppData\Local\Programs\Python\Python312\python.exe", required = TRUE)
use_python("C:/Users/USER/AppData/Local/Programs/Python/Python312/python.exe", required = TRUE)
py_config()
# Install the sympy package if you haven't already
install.packages("sympy")
install_sympy(method = "auto")
# Install the sympy package if you haven't already
install.packages("sympy")
sympy <- import("sympy")
library(magrittr)  # For the `%>%` pipe operator
runDLRsym <- function(nv, ng) {
# Import SymPy
sympy <- import("sympy")
# Define symbolic matrices
A <- sympy$Matrix(nv, nv, function(row, col) sympy$Symbol(sprintf('a%d%d', row + 1, col + 1)))
D <- sympy$Matrix(nv, ng - 1, function(row, col) sympy$Symbol(sprintf('d%d%d', row + 1, col + 1)))
C <- sympy$Matrix(nv, nv, function(row, col) sympy$Symbol(sprintf('c%d%d', row + 1, col + 1)))
# Compute the inner matrix
identity_matrix <- sympy$eye(nv)
inner <- identity_matrix - A
# Compute the inverse of C
inverseC <- sympy$inv(C)
# Calculate DLRsym
DLRsym <- inverseC %*% D
# Save each element of DLRsym to a separate file
for (row in 0:(nv-1)) {
for (col in 0:(ng-2)) {
name <- sprintf("DLRsym%d%d.rds", row + 1, col + 1)
varr <- DLRsym[row + 1, col + 1]
saveRDS(varr, file = name)
}
}
# Print completion message
print("Execution completed.")
}
A <- sympy$Matrix(nv, nv, function(row, col) sympy$Symbol(sprintf('a%d%d', row + 1, col + 1)))
nv=6;A <- sympy$Matrix(nv, nv, function(row, col) sympy$Symbol(sprintf('a%d%d', row + 1, col + 1)))
nv=6;A <- sympy$Matrix(nv, nv, function(row, col) sympy$Symbol(sprintf('a%d%d', row + 1, col + 1)))
nv=6,A <- sympy$Matrix(nv, nv, function(row, col) sympy$Symbol(sprintf('a%d%d', row + 1, col + 1)))
nv=6;A <- sympy$Matrix(nv, nv, function(row, col) sympy$Symbol(sprintf('a%d%d', row + 1, col + 1)))
nv=as.integer(6);A <- sympy$Matrix(nv, nv, function(row, col) sympy$Symbol(sprintf('a%d%d', row + 1, col + 1)))
str(nv)
nv=as.integer(6);A <- sympy$Matrix(nv, nv, function(row, col) sympy$Symbol(sprintf('a%d%d', row + 1, col + 1)))
A <- sympy$Matrix(nv, nv, function(row, col) sympy$Symbol(sprintf('a%d%d', row + 1, col + 1)))
A <- sympy$Matrix(nv, nv, function(row, col) sympy$Symbol(sprintf('a%d%d', row, col)))
A <- sympy$Matrix(nv, nv, function(row, col) sympy.Symbol(f'a{row+1}{col+1}'))
library(Ryacas)
library(Ryacas)
A <- sympy$Matrix(nv, nv, function(row, col) f'a{row+1}{col+1}')
A <- sympy$Matrix(nv, nv, function(row, col) sympy.symbols(f'a{row+1}{col+1}'))
A <- sympy$Matrix(nv, nv, function(row, col) sympy.symbols('f'a{row+1}{col+1}''))
A <- sympy$Matrix(nv, nv, function(row, col) sympy.symbols(`f'a{row+1}{col+1}'`))
A <- sympy$Matrix(nv, nv, function(row, col) sympy.symbols(f'a{row+1}{col+1}'))
A <- sympy$Matrix(nv, nv, lambda row, col: sympy.symbols(f'a{row+1}{col+1}'))
A <- sympy.Matrix(nv, nv, lambda row, col: sympy.symbols(f'a{row+1}{col+1}'))
A <- sympy$Matrix(nv, nv, lambda row, col: sympy$symbols(f'a{row+1}{col+1}'))
A <- sympy$Matrix(nv, nv, function(row, col) sympy$symbols(f'a{row+1}{col+1}'))
A <- sympy$Matrix(nv, nv, function(row, col) sympy$symbols("f'a{row+1}{col+1}'"))
A
A <- sympy$Matrix(nv, nv, function(row, col) sympy$symbols("f'a{row+1}{col+1}'"))
D <- sympy$Matrix(nv, ng - 1, function(row, col) sympy$symbols("f'd{row+1}{col+1}'"))
# Not working below....
runDLRsym <- function(nv, ng) {
# Import SymPy
sympy <- import("sympy")
# Define symbolic matrices
A <- sympy$Matrix(nv, nv, function(row, col) sympy$symbols("f'a{row+1}{col+1}'"))
D <- sympy$Matrix(nv, ng - 1, function(row, col) sympy$symbols("f'd{row+1}{col+1}'"))
C <- sympy$Matrix(nv, nv, function(row, col) sympy$symbols("f'c{row+1}{col+1}'"))
# Compute the inner matrix
identity_matrix <- sympy$eye(nv)
inner <- identity_matrix - A
# Compute the inverse of C
inverseC <- sympy$inv(C)
# Calculate DLRsym
DLRsym <- inverseC %*% D
# Save each element of DLRsym to a separate file
for (row in 0:(nv-1)) {
for (col in 0:(ng-2)) {
name <- sprintf("DLRsym%d%d.rds", row + 1, col + 1)
varr <- DLRsym[row + 1, col + 1]
saveRDS(varr, file = name)
}
}
# Print completion message
print("Execution completed.")
}
sprintf("DLRsym%d%d.rds", 1, 1)
runDLRsym(6,3)
for (row in 0:(nv-1)) {
for (col in 0:(ng-2)) {
name <- sprintf("DLRsym%d%d.rds", row + 1, col + 1)
varr <- DLRsym[row + 1, col + 1]
saveRDS(varr, file = name)
}
nv=6;ng=3
for (row in 0:(nv-1)) {
for (col in 0:(ng-2)) {
name <- sprintf("DLRsym%d%d.rds", row + 1, col + 1)
varr <- DLRsym[row + 1, col + 1]
saveRDS(varr, file = name)
}
}
A <- sympy$Matrix(nv, nv, function(row, col) sympy$symbols("f'a{row+1}{col+1}'"))
A <- sympy$Matrix(nv, nv, function(row, col) sympy$symbols("f'a{row+1}{col+1}'"))
nv=as.integer(nv)
ng=as.integer(ng)
sympy <- import("sympy")
# Define symbolic matrices
A <- sympy$Matrix(nv, nv, function(row, col) sympy$symbols("f'a{row+1}{col+1}'"))
D <- sympy$Matrix(nv, ng - 1, function(row, col) sympy$symbols("f'd{row+1}{col+1}'"))
str(ng)
str(nv)
sympy$Matrix(nv, nv, function(row, col) sympy$symbols("f'a{row+1}{col+1}'"))
A <- sympy$Matrix(nv, nv, function(row, col) sympy$symbols("f'a{row+1}{col+1}'"))
D <- sympy$Matrix(nv, ng - 1, function(row, col) sympy$symbols("f'd{row+1}{col+1}'"))
str(ng - 1)
D <- sympy$Matrix(nv, as.integer(ng - 1), function(row, col) sympy$symbols("f'd{row+1}{col+1}'"))
A <- sympy$Matrix(nv, nv, function(row, col) sympy$symbols("f'a{row+1}{col+1}'"))
D <- sympy$Matrix(nv, as.integer(ng - 1), function(row, col) sympy$symbols("f'd{row+1}{col+1}'"))
C <- sympy$Matrix(nv, nv, function(row, col) sympy$symbols("f'c{row+1}{col+1}'"))
# Compute the inner matrix
identity_matrix <- sympy$eye(nv)
inner <- identity_matrix - A
# Compute the inverse of C
inverseC <- sympy$inv(inner)
inverseC <- sympy$Inverse(inner)
View(inverseC)
A <- sympy$Matrix(nv, nv, function(row, col) sympy$symbols("f'a{row+1}{col+1}'"))
D <- sympy$Matrix(nv, as.integer(ng - 1), function(row, col) sympy$symbols("f'd{row+1}{col+1}'"))
C <- sympy$Matrix(nv, nv, function(row, col) sympy$symbols("f'c{row+1}{col+1}'"))
# Compute the inner matrix
identity_matrix <- sympy$eye(nv)
inner <- identity_matrix - A
# Compute the inverse of C
inverseC <- sympy$Inverse(inner)
# Calculate DLRsym
DLRsym <- inverseC %*% D
gc()
View(DLRsym)
View(DLRsym)
View(DLRsym)
str(DLRsym)
dim(DLRsym)
dim(DLRsym)
# Save each element of DLRsym to a separate file
for (row in 0:(nv-1)) {
for (col in 0:(ng-2)) {
name <- sprintf("DLRsym%d%d.rds", row + 1, col + 1)
varr <- DLRsym[row + 1, col + 1]
saveRDS(varr, file = name)
}
}
dim(DLRsym)
dim(as.matrix(DLRsym))
class(DLRsym)
DLRsym <- sympy$Matrix(DLRsym)
# Save each element of DLRsym to a separate file
for (row in 0:(nv-1)) {
for (col in 0:(ng-2)) {
name <- sprintf("DLRsym%d%d.rds", row + 1, col + 1)
varr <- DLRsym[row + 1, col + 1]
saveRDS(varr, file = name)
}
}
# Calculate DLRsym
DLRsym <- inverseC %*% D
View(inner)
View(inner)
DLRsym[1,1]
# Save each element of DLRsym to a separate file
for (row in 0:(nv-1)) {
for (col in 0:(ng-2)) {
name <- sprintf("DLRsym%d%d.txt", row + 1, col + 1)
varr <- DLRsym[row + 1, col + 1]
save(varr, file = name)
}
}
# Save each element of DLRsym to a separate file
for (row in 0:(nv-1)) {
for (col in 0:(ng-2)) {
name <- sprintf("DLRsym%d%d.txt", row + 1, col + 1)
varr <- DLRsym[row + 1, col + 1]
writeLines(varr, file = name)
}
}
?writeLines
writeLines(varr, con = name)
for (col in 0:(ng-2)) {
name <- sprintf("DLRsym%d%d.txt", row + 1, col + 1)
varr <- DLRsym[row + 1, col + 1]
writeLines(varr, con = name)
}
class(DLRsym[1,1])
class(as.character(DLRsym[1,1]))
(as.character(DLRsym[1,1]))
# Save each element of DLRsym to a separate file
for (row in 0:(nv-1)) {
for (col in 0:(ng-2)) {
name <- sprintf("DLRsym%d%d.txt", row + 1, col + 1)
varr <- DLRsym[row + 1, col + 1]
writeLines(as.character(varr), con = name)
}
}
# Save each element of DLRsym to a separate file
for (row in 1:nv) {
for (col in 1:(ng-1)) {
name <- sprintf("DLRsym%d%d.txt", row , col)
varr <- DLRsym[row , col]
writeLines(as.character(varr), con = name)
}
}
A <- sympy$Matrix(nv, nv, lambda row, col: sympy$symbols("f'a{row+1}{col+1}'"))
tem = ysym("f'a{row+1}{col+1}'")
for(row in 1:6){
for(col in 1:3){
tem = ysym("f'a{row+1}{col+1}'")
}
}
tem
ysym("f'a{1}{1}'")
ySym("f'a{1}{1}'")
library(Ryacas)
ySym("f'a{1}{1}'")
?ysym
for(col in 1:3){
tem = sprintf('a{row}{col}',row,col)
}
for(row in 1:6){
for(col in 1:3){
tem = sprintf('a%row%col',row,col)
}
}
tem = sprintf("a%row%col",row,col)
tem = sprintf("a%d%d",row,col)
tem
tem = ysym(sprintf("a%d%d",row,col))
tem
A = yMatrix(rep(6*2),NA)
A
?ymatrix
matrix(rep("a",6),2,3)
A = matrix(rep(6*2),NA)
A = matrix(rep(NA,6*2),6,2)
A
for(row in 1:6){
for(col in 1:6){
tem = ysym(sprintf("a%d%d",row,col))
A[row,col] =tem
}
}
A = matrix(rep(NA,6*6),6,6)
for(row in 1:6){
for(col in 1:6){
tem = ysym(sprintf("a%d%d",row,col))
A[row,col] =tem
}
}
A[row,col] = row+col
A
A = matrix(rep(NA,6*6),6,6)
for(row in 1:6){
for(col in 1:6){
tem = ysym(sprintf("a%d%d",row,col))
A[row,col] = row+col
}
}
A
A = matrix(rep(NA,6*6),6,6)
for(row in 1:6){
for(col in 1:6){
tem = ysym(sprintf("a%d%d",row,col))
A[row,col] = tem
}
}
A = matrix(rep(NA,6*6),6,6)
for(row in 1:6){
for(col in 1:6){
tem = sprintf("a%d%d",row,col)
A[row,col] = tem
}
}
A
as_r(A)
as_y(A)
eye(nv)
diag(nv)
inner <- identity_matrix - A
class(D)
A <- matrix(rep(NA,np*np),np,np)
for(row in 1:np){
for(col in 1:np){
tem = sprintf("a%d%d",row,col)
A[row,col] = tem
}
}
A = as_y(A)
D <- matrix(rep(NA,np*(ng-1)),np,(ng-1))
for(row in 1:np){
for(col in 1:(ng-1)){
tem = sprintf("d%d%d",row,col)
D[row,col] = tem
}
}
D = as_y(D)
# Compute the inner matrix
identity_matrix <- as_y(diag(nv))
class(D)
inner <- identity_matrix - A
class(A)
library(Ryacas)
A <- matrix(rep(NA,np*np),np,np)
for(row in 1:np){
for(col in 1:np){
tem = sprintf("a%d%d",row,col)
A[row,col] = tem
}
}
A
str(A)
dim(A)
y_print(A)
A <- diag(4)
Ayac <- as_y(A)
y_print(Ayac)
B <- A
B[2, 2] <- "-t"
Byac <- as_y(B)
B
A <- diag(4)
Ayac <- as_y(A)
y_print(Ayac)
B <- A
Byac <- as_y(B)
B[2, 2] <- "-t"
B
y_print(Byac)
Ayac - Byac
as_y(Ayac - Byac)
add(Ayac, Byac)
sum(Ayac, Byac)
sum(Ayac, Byac)
?ryacas::sum
?Ryacas::sum
?Ryacas::sum()
?Ryacas::
?Ryacas::
sum()
?Ryacas::
?sum()
A <- matrix(rep(NA,np*np),np,np)
for(row in 1:np){
for(col in 1:np){
tem = sprintf("a%d%d",row,col)
A[row,col] = tem
}
}
A = as_y(A)
y_print(A)
D <- matrix(rep(NA,np*(ng-1)),np,(ng-1))
for(row in 1:np){
for(col in 1:(ng-1)){
tem = sprintf("d%d%d",row,col)
D[row,col] = tem
}
}
D = as_y(D)
Inner = matrix(NA,nv*nv)
Inner
Inner = matrix(NA,nv,nv)
Inner
identity_matrix = diag(nv)
for(i in 1:nv){
for(j in 1:nv){
Inner[i,j] = sprintf("%d-%s",identity_matrix[i,j],A[i,j])
}
}
A[1,1]
nv=6;ng=3
A <- matrix(rep(NA,np*np),np,np)
A <- matrix(NA,nv,nv)
for(row in 1:nv){
for(col in 1:nv){
tem = sprintf("a%d%d",row,col)
A[row,col] = tem
}
}
A = as_y(A)
A
class(A[1,1])
A[1,1]
A
A <- matrix(NA,nv,nv)
for(row in 1:nv){
for(col in 1:nv){
tem = sprintf("a%d%d",row,col)
A[row,col] = tem
}
}
class(A[1,1])
D <- matrix(rep(NA,np*(ng-1)),np,(ng-1))
D
D[1,1]
D <- matrix(NA,np,(ng-1)
D
D <- matrix(NA,np,(ng-1))
D <- matrix(NA,nv,(ng-1))
for(row in 1:nv){
for(col in 1:(ng-1)){
tem = sprintf("d%d%d",row,col)
D[row,col] = tem
}
}
D[1,1]
identity_matrix = diag(nv)
Inner = matrix(NA,nv,nv)
for(i in 1:nv){
for(j in 1:nv){
Inner[i,j] = sprintf("%d-%s",identity_matrix[i,j],A[i,j])
}
}
Inner
outer(0:3, 1:4, "-") + diag(2:5)
outer(0:3, 1:4, "-")
diag(2:5)
inverseC <- solve(ysym(Inner))
View(inverseC)
inverseC[1,1]
