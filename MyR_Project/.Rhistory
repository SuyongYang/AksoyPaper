73
34
37
47
72
17
70
54
17
0
44
6
8
1
82
83
82
10
7
8
55.6
34
39
31
3
61
76
57
80
54
76
0
78
78
0.4
39.4
35
77
60.6
20
)
ex
ex<- c(93.6,
76,
25,
44.6,
66.4,
54,
26,
17.4,
73,
34,
37,
47,
72,
17,
70,
54,
17,
0,
44,
6,
8,
1,
82,
83,
82,
10,
7,
8,
55.6,
34,
39,
31,
3,
61,
76,
57,
80,
54,
76,
0,
78,
78,
0.4,
39.4,
35,
77,
60.6,
20)
hist(ex)
summary(ex)
install.packages("pcalg")
install.packages(c("backports", "broom", "car", "cli", "conquer", "cpp11", "crayon", "digest", "dtplyr", "fda", "fs", "ftsa", "future", "generics", "glue", "lmtest", "mclust", "nloptr", "parallelly", "pillar", "pracma", "rbibutils", "RcppArmadillo", "Rdpack", "readr", "rio", "rlang", "sp", "stringi", "tibble", "tinytex", "tseries", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2"))
library(pcalg)
library('pcalg')
library(tidyverse)
library(pcalg)
library(pcalg)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("graph")
library(pcalg)
source("https://bioconductor.org/biocLite.R")
biocLite("RBGL")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install("RBGL")
library(pcalg)
iris
class(iris)
summary(iris)
iris[,1]
iris
hist(iris[,1])
hist(iris[,2])
hist(iris[,3])
iris
head(iris)
names(iris)
hist(iris[,4])
hist(iris[,5])
iris[,5]
summary(iris[,5])
install.packages("TTR")
head(iris)
iris
end(iri)
end(iris)
ends(iris)
tail(iris)
library(pcalg)
p <- 10 # number of random variables
n <- 10000 # number of samples
s <- 0.4 # sparsness of the graph
## generate random data
set.seed(42)
g <- randomDAG(p,s) # generate a random DAG
d <- rmvDAG(n,g) # generate random samples
View(d)
iris
class(d)
iris_1<- iris[,1:3]
rirs_1
iris_1
class(iris_1)
iris_2<-as.matrix(iris_1)
iris_2
class(iris_2)
gSkel <- pcAlgo(d,alpha=0.05) # estimate of the skeleton
gCPDAG <- udag2cpdag(gSkel)
gSkel <- pcAlgo(d,alpha=0.05) # estimate of the skeleton
gCPDAG <- udag2pdag(gSkel)
plot(g)
install.packages("BiocManager")
BiocManager::install("Rgraphviz")
install.packages("BiocManager")
plot(g)
plot(gSkel,zvalue.lwd=TRUE)
plot(gCPDAG,zvalue.lwd=TRUE)
gSkel <- pcAlgo(iris_2,alpha=0.05) # estimate of the skeleton
gCPDAG <- udag2pdag(gSkel)
plot(gSkel,zvalue.lwd=TRUE)
plot(gCPDAG,zvalue.lwd=TRUE)
head(iris)
iris_1<- iris[,1:4]
iris_2<-as.matrix(iris_1)
gSkel <- pcAlgo(iris_2,alpha=0.05) # estimate of the skeleton
gCPDAG <- udag2pdag(gSkel)
plot(gSkel,zvalue.lwd=TRUE)
plot(gCPDAG,zvalue.lwd=TRUE)
load("~/PhD thesis/KimReplicExchAnomaly/KimReplicExchAnom.R")
load("~/PhD thesis/KimReplicExchAnomaly/KimReplicExchAnom.RData")
load("~/PhD thesis/BirthRateModel.R.RData")
View(panel_composite08)
View(panel_com08)
pop_y<-panel_com08[,c(6,12,13,22)]
View(pop_y)
pop_y<-panel_com08[,c(6,12,13)]
class(pop_y)
pop_y01<-as.matrix(pop_y)
class(pop_y01)
gSkel <- pcAlgo(pop_y01,alpha=0.05) # estimate of the skeleton
gSkel <- pcAlgo(pop_y01,alpha=0.05) # estimate of the skeleton
gSkel <- skeleton(pop_y01,alpha=0.05) # estimate of the skeleton
gSkel <- skeleton(pop_y01,p=3,alpha=0.05) # estimate of the skeleton
gSkel <- pcAlgo(pop_y01,alpha=0.05) # estimate of the skeleton
gSkel <- pc(pop_y01,alpha=0.05) # estimate of the skeleton
gSkel <- pcAlgo(pop_y01,alpha=0.05) # estimate of the skeleton
View(pop_y01)
gSkel <- skeleton(pop_y01,p=3,alpha=0.05) # estimate of the skeleton
first_output <- skeleton(suffStat = list(dm = pop_y01, adaptDF = FALSE),
indepTest = binCItest, alpha = 0.01)
first_output <- skeleton(suffStat = list(dm = pop_y01, adaptDF = FALSE),
indepTest = binCItest, alpha = 0.01,p=3)
first_output <- skeleton(suffStat = list(dm = pop_y, adaptDF = FALSE),
indepTest = binCItest, alpha = 0.01,p=3)
first_output <- skeleton(suffStat = list(g = pop_y, adaptDF = FALSE),
indepTest = binCItest, alpha = 0.01,p=3)
first_output <- skeleton(suffStat = list(g = pop_y, adaptDF = FALSE),
indepTest =  dsepTest, alpha = 0.01)
colnames(pop_y)
first_output <- skeleton(suffStat = list(g = pop_y, adaptDF = FALSE),
indepTest =  dsepTest, alpha = 0.01, labels=colnames(pop_y))
x=[0.56324	0.63873	0.64689	0.74963	0.89316	0.94033	1.05786	1.12037	1.21498	1.30792	1.36854	1.37369	1.44592	1.6648	1.71372	1.78034	1.91214	1.99786	2.02243	2.05701	2.10033	2.11603	2.14058]
x=c(0.56324	0.63873	0.64689	0.74963	0.89316	0.94033	1.05786	1.12037	1.21498	1.30792	1.36854	1.37369	1.44592	1.6648	1.71372	1.78034	1.91214	1.99786	2.02243	2.05701	2.10033	2.11603	2.14058)
x=c(0.56324	0.63873	0.64689	0.74963	0.89316	0.94033	1.05786	1.12037	1.21498	1.30792	1.36854	1.37369	1.44592	1.6648	1.71372	1.78034	1.91214	1.99786	2.02243	2.05701	2.10033	2.11603	2.14058)
install.packages("rjags")
library(rjags)
install.packages(c("crayon", "fansi", "tseries"))
modelString="
model
{
for(i in 1:n){
x[i] ~ dnorm( mu, invsigsq) # 데이터의 분포
}
mu ~ dnorm(mu0, invsigsq0) # 사전분포
invsigsq ~ dgamma(a,b)
sigsq <- 1/invsigsq # 모수의 변환
mu0<- 10 # 상수값 지정
invsigsq0 <- 1/25
a<- 0.5
b<- 1
}
"
writeLines(modelString, "model_ex11_1.txt")
dataList=list( n=10, x=c(10,13,15,11,9,18,20,17,23,21))
initsList=list(mu=10 , invsig=0.04)
sample(x, replace=T)
sample(c(1,53,6,9),replace = T)
sample(c(1,53,6,9),replace = T)
? sample
sample(c(1,53,6,9),size=13,replace = T)
hist(sample(c(1,53,6,9),size=1873,replace = T))
hist(sample(c(1,53,6,9),size=187300,replace = T))
sd(sample(c(1,53,6,9),size=187300,replace = T))
initsList=function(){
resampledX=sample(x, replace=T)
muInit=sum(resampledX)/length(resampledX)
invsigsqInit= (1/sd(resampledX))^2*0.999+0.01
return( list( mu=muInit, invsigsq=invsigsqInit))
}
jagsModel=jags.model( file="model_ex11_1.txt", data=dataList,inits=initsList,n.chains=3, n.adapt=500)
update(jagsModel, n.iter=500)
jagsModel=jags.model( file="model_ex11_1.txt", data=dataList,inits=initsList,n.chains=3, n.adapt=500)
initsList=list(mu=10 , invsig=0.04)
jagsModel=jags.model( file="model_ex11_1.txt", data=dataList,inits=initsList,n.chains=3, n.adapt=500)
update(jagsModel, n.iter=500)
codaSamples=coda.samples(jagsModel, variable.names=c("mu", "sigsq"),n.iter=5000)
coda::traceplot( codaSamples[,"mu"] , main="" , ylab="mu" )
acf(codaSamples[,"mu"][[1]],plot=T, main="")
par(mar)
? par
par()
par$mar
par(margin.table())
par()$mar
class(codaSamples)
codaSamples[,"mu"]
class(codaSamples[,"mu"])
as.matrix(codaSamples[,"mu"])
head(as.matrix(codaSamples[,"mu"]))
head(codaSamples[,"mu"])
length(as.matrix(codaSamples[,"mu"]))
coda::traceplot( codaSamples[,"mu"] , main="" , ylab="mu" )
acf(codaSamples[,"mu"][[1]],plot=T, main="")
coda::traceplot( codaSamples[,"sigsq"] , main="" , ylab="sigsq" )
acf(codaSamples[,"sigsq"][[1]],plot=T, main="")
MuSamples=as.matrix(codaSamples[,"mu"])
SigSamples=as.matrix(codaSamples[,"sigsq"])
par(mfrow=c(1,2))
plot(density(MuSamples), xlab=expression(mu), ylab="posterior density",main="")
plot(density(SigSamples), xlab=expression(sigma^2), ylab="posterior density",main="")
rejectionRate(codaSamples)
AcceptRate=1-rejectionRate(codaSamples)
AcceptRate
1-c(0.21,21)
max.ni=31
data=matrix(scan('http://home.ewha.ac.kr/~msoh/Bayesianbook/mathscore.txt'),ncol=max.ni+2,byrow=T)
ni=data[,2]
K=length(ni)
X=data[,3:(max.ni+2)]
View(data)
View(X)
View(data)
xbar = rep(0,K) ;s = rep(0,K) ; x.min= rep(0,K) ; x.max = rep(0,K)
for (i in 1:K) x.min[i] = min(X[i,1:ni[i]])
for (i in 1:K) x.max[i] = max(X[i,1:ni[i]])
for (i in 1:K) xbar[i] = mean(X[i,1:ni[i]])
for (i in 1:K) s[i] = sd(X[i,1:ni[i]])
par(mfrow=c(1,1))
plot(xbar, ylim=c(50,210), type="n", xlab="school", ylab="math score")
for(i in 1:K) for(j in 1:ni[i]) points(i,X[i,j])
for(i in 1:K) lines(c(i,i), c(x.min[i],x.max[i]) )
for(i in 1:K) points(i,xbar[i], pch=19)
xtotal.mean =mean(xbar)
lines(c(-1:100),rep(xtotal.mean,102), lwd=4)
? plot
plot(xbar, ylim=c(50,210), type="n", xlab="school", ylab="math score")
mean(1,2,3)
mean(c(1,2,3))
mean(mean(c(1,2,3)), mean(c(1,2))))
mean(mean(c(1,2,3)), mean(c(1,2)))
mean(c(2,1,5))
mean(c(1,2,3,1,2))
mean(c(mean(c(1,2,3)), mean(c(1,2))))
mean(c(2,1.5))
a=0.5
sigsq0=mean(s**2)
b=a*sigsq0
c=0.5
tausq0=var(xbar)
d=c*tausq0
k0<-1
mu0<-mean(xbar)
##########Start Gibbs ###############
Nwarm=1000; Nsim=5000
THETA=matrix(nrow=Nsim,ncol=K)
MTS=matrix(nrow=Nsim,ncol=3)
theta=c(1:K)
# initial values
mu=mu0
tausq=tausq0
sigsq=sigsq0
theta=xbar
for(ns in 1:(Nwarm+Nsim) ){
#generate theta
for(i in 1:K){
mi=(xbar[i]*ni[i]/sigsq + mu/tausq)/(1/tausq+ni[i]/sigsq)
vari=1/(1/tausq+ni[i]/sigsq)
theta[i]=rnorm(1,mi,sqrt(vari))
}
#generate sigsq
alpha=0.5*sum(ni)+a
sum=0
for(i in 1:K) for (j in 1: ni[i]){
sum=sum+(X[i,j]- theta[i])^2
}
beta=b+ 0.5*sum
sigsq=1/rgamma(1,alpha,beta)
#generate mu
mu=rnorm(1,(K*mean(theta)+ k0*mu0)/(K+k0),sqrt(tausq/(K+k0)))
#generate tausq
alpha=c +0.5*K +0.5
sum=0
for(i in 1:K)sum=sum+(theta[i]- mu)^2
beta=d + 0.5*(k0*(mu-mu0)^2+sum)
tausq = 1/rgamma(1,alpha,beta)
#store
if( ns > Nwarm) {
THETA[ns-Nwarm,]=theta
MTS[ns-Nwarm,]=c(mu,sigsq,tausq)
}
}
######End Gibbs######
#3 p.275
#time sequence plot
par(mfrow=c(1,3))
plot(MTS[,1], ylab="mu")
plot((MTS[,2]), ylab="sigsq")
plot((MTS[,3]), ylab="tausq")
#Auto correlation graph
par(mfrow=c(1,3))
acf(MTS[,1], ylab="ACF mu")
acf(MTS[,2], ylab="ACF sigsq")
acf(MTS[,3], ylab="ACF tausq")
#posterior density function of mu, sigma^2, tau^2
par(mfrow=c(1,3))
plot(density(MTS[,1]),xlab=expression(mu),main="")
abline(v=quantile(MTS[,1],c(0.025,0.5,0.975)), lty=c(3,2,3))
plot(density(MTS[,2]), xlab=expression(sigma^2),main="")
abline(v=quantile(MTS[,2],c(0.025,0.5,0.975)), lty=c(3,2,3))
plot(density(MTS[,3]), xlab=expression(tau^2),main="")
abline(v=quantile(MTS[,3],c(0.025,0.5,0.975)), lty=c(3,2,3))
#inference
#inference
mu.hat=mean(MTS[,1])
sigsq.hat=mean(MTS[,2])
tausq.hat=mean(MTS[,3])
theta.hat=apply(THETA,2,mean)
#plot of theta.hat_i
par(mfrow=c(1,1))
theta.grid=seq(mu.hat-7*sqrt(tausq.hat),mu.hat+7*sqrt(tausq.hat),length=100)
hist(theta.hat,prob=T,main="")
lines(theta.grid,dnorm(theta.grid,mu.hat,sqrt(tausq.hat)))
xtotal.mean=sum( ni*xbar)/sum(ni)
par(mfrow=c(1,1))
plot(c(1:K),xbar , ylim=c(100,150), xlab="i")
points(c(1:K),theta.hat, pch=19)
lines(c(1:K), rep(xtotal.mean, K), lw=4)
for(i in 1:K) lines( c(i,i),c( xbar[i], xtotal.mean))
plot(c(1:K),xbar , ylim=c(100,150), xlab="i")
points(c(1:K),theta.hat, pch=19)
?apply
lines(c(1:K), rep(xtotal.mean, K), lw=4)
modelString="
model
{
for(i in 1:K){
for (j in 1:ni[i]){
x[i,j] ~ dnorm( theta[i], invsigsq)
}
}
for(i in 1:K){
theta[i] ~ dnorm( mu, invtausq)
}
mu ~ dnorm(mu0, k0*invtausq)
invsigsq ~ dgamma(a,b)
invtausq ~ dgamma(c,d)
sigsq= 1/invsigsq
tausq= 1/invtausq
}
"
writeLines(modelString, "model_ex12_1.txt")
max.ni=31
data=matrix(scan('http://home.ewha.ac.kr/~msoh/Bayesianbook/mathscore.txt'),ncol=max.ni+2,byrow=T)
ni=data[,2]
K=length(ni)
X=data[,3:(max.ni+2)]
xbar = rep(0,K) ;s = rep(0,K)
for (i in 1:K) xbar[i] = mean(X[i,1:ni[i]])
for (i in 1:K) s[i] = sd(X[i,1:ni[i]])
#prior
a=0.5
sigsq0=mean(s**2)
b=a*sigsq0
c=0.5
tausq0=var(xbar)
d=c*tausq0
k0<-1
mu0<-mean(xbar)
dataList=list(K=K, x=X, ni=ni, a=a, b=b, c=c,d=d, k0=k0, mu0=mu0)
initsList= list( theta=xbar, mu=mu0, invtausq= 1/tausq0,invsigsq=1/sigsq0)
nChains=3
jagsModel=jags.model( file="model_ex12_1.txt", data=dataList,inits=initsList,
n.chains=nChains, n.adapt=100)
update(jagsModel, n.iter=1000)
codaSamples=coda.samples(jagsModel, variable.names=c("theta","mu","sigsq","tausq"),n.iter=30000)
variable.names(codaSamples[[1]])
install.packages("coda")
require(coda)
para=c("mu","sigsq", "tausq")
par(mfrow=c(3,2))
for(i in 1:3){
traceplot( codaSamples[,para[i]] , main="" , ylab=para[i] )
acf(codaSamples[,para[i]][[1]],plot=T, main="")
}
install.packages("coda")
par(mar=c(1,1,1,1))
MCMCSamples=as.matrix(codaSamples)
par(mfrow=c(1,3))
for(i in 1:3){
plot( density( MCMCSamples[,i]), main="",xlab=para[i])
HPD=quantile( MCMCSamples[,i], c(0.025, 0.975))
abline(v=HPD, lty=2)
}
load("~/PhD thesis/Aksoy_ Replication practice/data/ReplicationFiles_Empirical/BenchmarkModel/MyR_Project/.RData")
setwd("~/PhD thesis/Aksoy_ Replication practice/data/ReplicationFiles_Empirical/BenchmarkModel/MyR_Project")
library(WDI)
WDIsearch("rgdp cap")
WDI(indicator = c("real gdp"))
WDIsearch("real gdp")
WDIsearch("gdp")
Rgdpcap<-WDI(indicator = c("GDP per capita, PPP (constant 1987 international $)"))
setwd("~/PhD thesis/Aksoy_ Replication practice/data/ReplicationFiles_Empirical/BenchmarkModel/MyR_Project/PanelDataEconometricsWithR")
load("~/PhD thesis/Aksoy_ Replication practice/data/ReplicationFiles_Empirical/BenchmarkModel/MyR_Project/PanelDataEconometricsWithR/Data.RData")
load("~/PhD thesis/Aksoy_ Replication practice/data/ReplicationFiles_Empirical/BenchmarkModel/MyR_Project/PanelDataEconometricsWithR/Data.RData")
library("plm")
pdim(DemocracyIncome)
head(DemocracyIncome, 4)
View(DemocracyIncome)
ols0 <- plm(democracy ~ lag(democracy) + lag(income) + year - 1,
DemocracyIncome, index = c("country", "year"),
model = "pooling", subset = sample == 1)
coef(summary(ols0))
ols1 <- plm(democracy ~ lag(democracy) + lag(income) + year,
DemocracyIncome, index = c("country", "year"),
model = "pooling", subset = sample == 1)
coef(summary(ols1))
ols2 <- plm(democracy ~ lag(democracy) + lag(income),
DemocracyIncome, index = c("country", "year"),
model = "within", effect = "individual",
subset = sample == 1)
coef(summary(ols2))
ols3 <- plm(democracy ~ lag(democracy) + lag(income),
DemocracyIncome, index = c("country", "year"),
model = "within", effect = "time",
subset = sample == 1)
coef(summary(ols3))
load("~/PhD thesis/Aksoy_ Replication practice/data/ReplicationFiles_Empirical/BenchmarkModel/MyR_Project/.RData")
load("~/PhD thesis/Aksoy_ Replication practice/data/ReplicationFiles_Empirical/BenchmarkModel/MyR_Project/.RData")
library(tidyverse)
library('tidyverse')
setwd("~/PhD thesis/Aksoy_ Replication practice/data/ReplicationFiles_Empirical/BenchmarkModel/MyR_Project")
library('readxl')
PanelData = read_xls('Data_DtaToXlsx.xls')
View(PanelData)
summary(PanelData)
Panelg7 = PanelData %>% select(g7==1)
PanelData$g7
Panelg7 = PanelData %>% filter(g7==1)
View(Panelg7)
table(Panelg7)
table(Panelg7$countrycode)
table(Panelg7$country)
PanelCountryNames = Panelg7 %>% select(country,countrycode)
PanelCountryNames
View(Panelg7)
View(PanelData)
View(PanelCountryNames)
save.image("~/PhD thesis/Aksoy_ Replication practice/data/ReplicationFiles_Empirical/BenchmarkModel/MyR_Project/.RData")
